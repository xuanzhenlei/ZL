# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-01-12 06:58
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DefaultJurisdiction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organize_id', models.IntegerField()),
                ('role', models.IntegerField()),
                ('jurisdiction_id', models.IntegerField()),
            ],
            options={
                'db_table': 'default_jurisdiction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Jurisdiction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('function_name', models.CharField(blank=True, max_length=50, null=True)),
                ('url', models.CharField(blank=True, max_length=255, null=True)),
                ('url_code', models.CharField(blank=True, max_length=50, null=True)),
                ('parent_true_id', models.CharField(max_length=20)),
                ('level', models.IntegerField()),
                ('organize_id', models.IntegerField()),
            ],
            options={
                'db_table': 'jurisdiction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Organize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organize_name', models.CharField(blank=True, max_length=50, null=True)),
                ('level', models.IntegerField()),
                ('parent_tree_id', models.CharField(max_length=50)),
                ('parent_tree_name', models.CharField(blank=True, max_length=100, null=True)),
                ('url', models.CharField(blank=True, max_length=255, null=True)),
                ('create_time', models.DateTimeField()),
                ('create_user_name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'organize',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserJurisdiction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('jurisdiction_id', models.IntegerField()),
            ],
            options={
                'db_table': 'user_jurisdiction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserUpdateRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('user_name', models.CharField(max_length=25)),
                ('update_user_id', models.IntegerField()),
                ('update_user_name', models.CharField(max_length=25)),
                ('update_time', models.DateTimeField()),
                ('update_type', models.IntegerField()),
                ('details', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'user_update_record',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(help_text='Required. 30 characters or fewer. Letters, numbers and @/./+/-/_ characters', max_length=30, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[\\w.@+-]+$'), 'Enter a valid username.', 'invalid')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('default_Ups', models.IntegerField(blank=True, default=-1, null=True)),
                ('default_Usps', models.IntegerField(blank=True, default=-1, null=True)),
                ('default_Fedex', models.IntegerField(blank=True, default=-1, null=True)),
                ('international', models.BooleanField(default=False)),
                ('erp_id', models.IntegerField(default=0)),
                ('organize_id', models.IntegerField(blank=True, null=True)),
                ('user_code', models.CharField(blank=True, max_length=50, null=True)),
                ('position', models.CharField(blank=True, max_length=50, null=True)),
                ('force_password', models.CharField(max_length=50)),
                ('create_user_id', models.IntegerField(default=0)),
                ('create_user_name', models.CharField(max_length=50)),
                ('update_time', models.DateTimeField(blank=True, null=True)),
                ('update_user_id', models.IntegerField(blank=True, null=True)),
                ('update_user_name', models.CharField(blank=True, max_length=50, null=True)),
                ('quit_time', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of his/her group.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('erp_username', models.CharField(blank=True, max_length=200, null=True)),
                ('erp_password', models.CharField(blank=True, max_length=200, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'profile',
            },
        ),
    ]
